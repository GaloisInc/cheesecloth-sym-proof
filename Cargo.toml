[package]
name = "sym-proof"
version = "0.1.0"
authors = ["Stuart Pernsteiner <spernsteiner@galois.com>"]
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]

serde = { version = "1", default-features = false, features = ["derive", "alloc"] }
log = { version = "=0.4.18", features = ["release_max_level_off"] }

cheesecloth-alloc = { path = "../rust-support/cheesecloth-alloc", optional = true }

# These lines will be excluded when building for MicroRAM
witness-checker = { path = "../witness-checker", package = "cheesecloth" }

serde_cbor = { version = "0.10" }
serde_json = { version = "1" }
serde_yaml = { version = "0.8" }

env_logger = { version = "0.7", default-features = false }
bumpalo = { version = "3.14.0" }

[package.metadata.microram]
# Only these dependencies are kept when building for microram.
deps = ["serde", "log", "cheesecloth-alloc"]
# These binary targets are kept when building for microram, with adjusted
# `path`s.
bins = ["interp_grit_microram"]


[features]
verbose = []
debug_symbolic = []
# Use MicroRAM `__cc_*` APIs within the sym_proof library.  These can either be
# provided by the MicroRAM compiler or emulated with Rust code.
microram_api = ["stage4"]
# Build for running on MicroRAM.  This omits the emulation for `__cc_*` APIs.
microram = ["microram_api", "cheesecloth-alloc"]
deny_warnings = []

stage0 = [
    "recording_concrete_state",
    "recording_rules",
    "recording_search_index",
    "recording_terms",
]
stage1 = [
    "playback_concrete_state",
    "playback_rules",
    "playback_search_index",
    "playback_terms",
    "recording_term_table",
    "recording_term_index",
    "recording_avec_len",
    "recording_amap_keys",
]
stage2 = [
    "playback_concrete_state",
    "playback_rules",
    "playback_search_index",
    "playback_term_table",
    "playback_term_index",
    "playback_avec_len",
    "playback_amap_keys",
    "recording_term_intern_index",
    "recording_amap_access",
]
stage3 = [
    "playback_concrete_state",
    "playback_rules",
    "playback_search_index",
    "playback_term_table",
    "playback_term_index",
    "playback_term_intern_index",
    "playback_avec_len",
    "playback_amap_keys",
    "playback_amap_access",
    "recording_linear",
]
stage4 = [
    "playback_concrete_state",
    "playback_rules",
    "playback_search_index",
    "playback_term_table",
    "playback_term_index",
    "playback_term_intern_index",
    "playback_avec_len",
    "playback_amap_keys",
    "playback_amap_access",
    "playback_linear",
]

recording_concrete_state = []
playback_concrete_state = []
recording_rules = []
playback_rules = []
recording_terms = []
playback_terms = []
recording_term_table = []
playback_term_table = []
recording_term_index = []
playback_term_index = []
recording_term_intern_index = []
playback_term_intern_index = []
recording_search_index = []
playback_search_index = []
recording_avec_len = []
playback_avec_len = []
recording_amap_keys = []
playback_amap_keys = []
recording_amap_access = []
playback_amap_access = []
recording_linear = []
playback_linear = []

# When adding new advice streams, be sure to update `doc/advice.md`.


[[bin]]
name = "interp_grit"
required-features = ["playback_concrete_state"]

[[bin]]
name = "interp_grit_microram"
required-features = ["microram_api"]

[[bin]]
name = "proof_sqrt"
required-features = ["debug_symbolic"]

[[bin]]
name = "interp_sqrt"
required-features = ["playback_concrete_state"]


[profile.dev]
opt-level = 1
debug = 2

# `build_microram.sh` uses the release profile.  We enable LTO and disbale
# codegen units so that `--emit llvm-bc` outputs a single bitcode file
# containing all binary and library code.
#
# Unfortunately, custom profiles are not supported in the toolchain we use for
# compiling to microram (rust 1.56).
[profile.release]
lto = true
panic = "abort"
incremental = false
codegen-units = 1
